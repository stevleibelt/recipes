#!/bin/bash
####
#work in progress script
####

####
#idea:
#
#replaces the create recipe script (or use them)
####

#begin of local variables
declare -r GLOBAL_CURRENT_WORKING_DIRECTORY=$(pwd)
declare -i GLOBAL_IS_DRY_RUN=0
declare -a GLOBAL_LIST_OF_CATEGORIES=("breakfast" "snack" "lunch" "dinner" "drink")  #@todo move into .data/file
declare -a GLOBAL_LIST_OF_README_ENGLISH_INDEX_CONTENT_LINES=()
declare -a GLOBAL_LIST_OF_README_GERMAN_INDEX_CONTENT_LINES=()
declare -r GLOBAL_PATH_OF_THE_CURRENT_SCRIPT=$(cd $(dirname "${BASH_SOURCE[0]}"); pwd)
declare -r GLOBAL_PATH_OF_THE_PROJECT_ROOT=${GLOBAL_PATH_OF_THE_CURRENT_SCRIPT}/../
#end of local variables

#begin of functions
function execute_or_output ()
{
    if [[ ${GLOBAL_IS_DRY_RUN} -eq 1 ]];
    then
        echo ""
        echo "$1"
    else
        $1
    fi
}
#end of functions

#begin of getops
function update_local_variables_by_parsing_the_getopts ()
{
    while getopts "dh" CURRENT_OPTION;
    do
        case ${CURRENT_OPTION} in
            d )
                GLOBAL_IS_DRY_RUN=1
                ;;
            h )
                echo "Usage: $(basename $0) [OPTION]"
                echo "The main command to create a new recipe."
                echo ""
                echo "Optional arguments."
                echo "  -d      enable dry run - nothing will happen"
                echo "  -h      print this help"
                echo ""
                ;;
        esac
    done
}
#end of getops

#begin of user input
function update_local_variables_by_user_input ()
{
    declare -i local AT_LEAST_ONE_TEMPLATE_WAS_SELECTED=0

    read -p ":: Will this recipe include an english translation? [y/n] (no is default): " ENGLISH_TEMPLATE_SELECTED

    read -p ":: Will this recipe include a german translation? [y/n] (yes is default): " GERMAN_TEMPLATE_SELECTED

    if [[ ${GERMAN_TEMPLATE_SELECTED} != "n" ]];
    then
        GERMAN_TEMPLATE_SELECTED="y"
    fi

    if [[ ${ENGLISH_TEMPLATE_SELECTED} == "y" ]];
    then
        AT_LEAST_ONE_TEMPLATE_WAS_SELECTED=1
    fi

    if [[ ${GERMAN_TEMPLATE_SELECTED} == "y" ]];
    then
        AT_LEAST_ONE_TEMPLATE_WAS_SELECTED=1
    fi

    if [[ ${AT_LEAST_ONE_TEMPLATE_WAS_SELECTED} -eq 0 ]];
    then
        echo "::"
        echo ":: Failed!"
        echo ":: You have to include at least one translation"
        cd ${GLOBAL_CURRENT_WORKING_DIRECTORY}

        exit 1
    fi

    echo ":: Available categories are"
    CATEGORY_LIST_AS_STRING=""

    for CATEGORY_KEY in ${!GLOBAL_LIST_OF_CATEGORIES[@]};
    do
        CATEGORY_LIST_AS_STRING+="${CATEGORY_KEY}) ${GLOBAL_LIST_OF_CATEGORIES[${CATEGORY_KEY}]}  "
    done

    while true; do
        echo "   ${CATEGORY_LIST_AS_STRING}"
        read -p ":: Please select the fitting category number. " CATEGORY_KEY_SELECTED

        if [[ -z ${CATEGORY_KEY_SELECTED} ]];
        then
            echo "::"
            echo ":: Failed!"
            echo ":: Please input a valid category number."
        elif [[ ! -z ${GLOBAL_LIST_OF_CATEGORIES[${CATEGORY_KEY_SELECTED}]} ]];
        then
            GLOBAL_CATEGORY_NAME="${GLOBAL_LIST_OF_CATEGORIES[${CATEGORY_KEY_SELECTED}]}"
            break;
        else
            echo "::"
            echo ":: Failed!"
            echo ":: Please input a valid category number."
        fi
    done
}
#end of user input

#begin of creating the file
function create_and_edit_recipe_file ()
{
    local PATH_OF_THE_INDEX_FILE=${GLOBAL_PATH_OF_THE_CURRENT_SCRIPT}/../.data/index
    local INDEX_OF_THE_NEXT_RECIPE=$(cat ${PATH_OF_THE_INDEX_FILE} | tr -cd [:digit:])
    local PATH_TO_THE_RECIPES=${GLOBAL_PATH_OF_THE_CURRENT_SCRIPT}/..

    local PATH_OF_THE_ENGLISH_TEMPLATE=${GLOBAL_PATH_OF_THE_CURRENT_SCRIPT}/../.data/english_template.md
    local PATH_OF_THE_GERMAN_TEMPLATE=${GLOBAL_PATH_OF_THE_CURRENT_SCRIPT}/../.data/german_template.md
    local PATH_OF_SELECTED_RECIPE_CATEGORY="${PATH_TO_THE_RECIPES}/${GLOBAL_CATEGORY_NAME}"
    local PATH_OF_NEXT_RECIPE="${PATH_OF_SELECTED_RECIPE_CATEGORY}/${INDEX_OF_THE_NEXT_RECIPE}.md"

    if [[ ! -d "${PATH_OF_SELECTED_RECIPE_CATEGORY}" ]];
    then
        execute_or_output "mkdir -p \"${PATH_OF_SELECTED_RECIPE_CATEGORY}\""
    fi

    execute_or_output "/usr/bin/env touch \"${PATH_OF_NEXT_RECIPE}\""

    if [[ ${GLOBAL_ENGLISH_TEMPLATE_SELECTED} == "y" ]];
    then
        execute_or_output "/usr/bin/env cat \"${PATH_OF_THE_ENGLISH_TEMPLATE}\" >> \"${PATH_OF_NEXT_RECIPE}\""
        #@todo implement a smarter way
        execute_or_output "/usr/bin/env echo \"\" >> \"${PATH_OF_NEXT_RECIPE}\""
    fi

    if [[ ${GLOBAL_GERMAN_TEMPLATE_SELECTED} == "y" ]];
    then
        execute_or_output "/usr/bin/env cat \"${PATH_OF_THE_GERMAN_TEMPLATE}\" >> \"${PATH_OF_NEXT_RECIPE}\""
    fi

    ((INDEX_OF_THE_NEXT_RECIPE++))
    execute_or_output "echo \"next: ${INDEX_OF_THE_NEXT_RECIPE}\" > \"${PATH_OF_THE_INDEX_FILE}\""

    execute_or_output "/usr/bin/env vim \"${PATH_OF_NEXT_RECIPE}\""
}
#begin of creating the file

#begin of creating dynamic content for the readme
function scan_recipe_files_and_create_language_based_index ()
{
    for RECIPE_CATEGORY in "${GLOBAL_LIST_OF_CATEGORIES[@]}";
    do
        if [[ -d ${RECIPE_CATEGORY}/ ]];
        then
            for RECIPE_FILENAME in $(ls ${RECIPE_CATEGORY}/);
            do
                local RECIPE_GERMAN_TITLE=""
                local RECIPE_ENGLISH_TITLE=""
                local NEXT_NOT_EMPTY_LINE_IS_THE_GERMAN_RECIPE_TITLE=0
                local NEXT_NOT_EMPTY_LINE_IS_THE_ENGLISH_RECIPE_TITLE=0

                while read -r CURRENT_RECIPE_CONTENT_LINE;
                do
                    if [[ ${NEXT_NOT_EMPTY_LINE_IS_THE_GERMAN_RECIPE_TITLE} -eq 1 ]];
                    then
                        if [[ ${CURRENT_RECIPE_CONTENT_LINE} != "" ]];
                        then
                            RECIPE_GERMAN_TITLE="${CURRENT_RECIPE_CONTENT_LINE}"
                            NEXT_NOT_EMPTY_LINE_IS_THE_GERMAN_RECIPE_TITLE=0
                        fi
                    elif [[ ${NEXT_NOT_EMPTY_LINE_IS_THE_ENGLISH_RECIPE_TITLE} -eq 1 ]];
                    then
                        if [[ ${CURRENT_RECIPE_CONTENT_LINE} != "" ]];
                        then
                            RECIPE_ENGLISH_TITLE="${CURRENT_RECIPE_CONTENT_LINE}"
                            NEXT_NOT_EMPTY_LINE_IS_THE_ENGLISH_RECIPE_TITLE=0
                        fi
                    else
                        if [[ "${CURRENT_RECIPE_CONTENT_LINE}" == "## Title" ]];
                        then
                            NEXT_NOT_EMPTY_LINE_IS_THE_ENGLISH_RECIPE_TITLE=1
                        elif [[ "${CURRENT_RECIPE_CONTENT_LINE}" == "## Titel" ]]; 
                        then
                            NEXT_NOT_EMPTY_LINE_IS_THE_GERMAN_RECIPE_TITLE=1
                        fi
                    fi
                done < "${RECIPE_CATEGORY}/${RECIPE_FILENAME}"

                if [[ "${RECIPE_ENGLISH_TITLE}" != "" ]];
                then
                    GLOBAL_LIST_OF_README_ENGLISH_INDEX_CONTENT_LINES+=("[${RECIPE_ENGLISH_TITLE}](https://github.com/stevleibelt/recipes/blob/master/${RECIPE_CATEGORY}/${RECIPE_FILENAME}#english")
                fi

                if [[ "${RECIPE_GERMAN_TITLE}" != "" ]];
                then
                    GLOBAL_LIST_OF_README_GERMAN_INDEX_CONTENT_LINES+=("[${RECIPE_GERMAN_TITLE}]((https://github.com/stevleibelt/recipes/blob/master/${RECIPE_CATEGORY}/${RECIPE_FILENAME}#deutsch)")
                fi
            done
        fi
    done

    #begin of sorting
    declare -a local SORTED_ARRAY=()
    IFS=$'\n' SORTED_ARRAY=($(sort <<<"${GLOBAL_LIST_OF_README_ENGLISH_INDEX_CONTENT_LINES[*]}"))
    unset IFS 
    GLOBAL_LIST_OF_README_ENGLISH_INDEX_CONTENT_LINES=${SORTED}

    declare -a local SORTED_ARRAY=()
    IFS=$'\n' SORTED_ARRAY=($(sort <<<"${GLOBAL_LIST_OF_README_GERMAN_INDEX_CONTENT_LINES[*]}"))
    unset IFS 
    GLOBAL_LIST_OF_README_GERMAN_INDEX_CONTENT_LINES=${SORTED}
    #end of sorting
}
#end of creating dynamic content for the readme

#begin of updating the readme
function update_readme ()
{
    local PATH_OF_THE_README=${GLOBAL_PATH_OF_THE_CURRENT_SCRIPT}/../README.md
    local PATH_OF_THE_TEMPORARY_README=${PATH_OF_THE_README}.temporary
    local PUT_NEXT_CONTENT_LINE_INTO_TEMPORARY_FILE=1

    echo "" > "${PATH_OF_THE_TEMPORARY_README}"

    while read -r CURRENT_CONTENT_LINE;
    do
        if [[ ${PUT_NEXT_CONTENT_LINE_INTO_TEMPORARY_FILE} -ne 1 ]];
        then
            FIRST_CHARACTER=${CURRENT_CONTENT_LINE:0:1}

            if [[ "${FIRST_CHARACTER}" == "#" ]];
            then
                echo "new headline \"${CURRENT_CONTENT_LINE}\" detected"
                PUT_NEXT_CONTENT_LINE_INTO_TEMPORARY_FILE=1
            fi
        fi

        if [[ ${PUT_NEXT_CONTENT_LINE_INTO_TEMPORARY_FILE} -eq 1 ]];
        then
            echo "${CURRENT_CONTENT_LINE}" >> "${PATH_OF_THE_TEMPORARY_README}"

            if [[ "${CURRENT_CONTENT_LINE}" == "## Index" ]];
            then
                PUT_NEXT_CONTENT_LINE_INTO_TEMPORARY_FILE=0
                echo "" >> "${PATH_OF_THE_TEMPORARY_README}"
                for ENGLISH_INDEX_CONTENT_LINE in "${GLOBAL_LIST_OF_README_ENGLISH_INDEX_CONTENT_LINES[@]}";
                do
                    echo "* ${ENGLISH_INDEX_CONTENT_LINE}" >> "${PATH_OF_THE_TEMPORARY_README}"
                done
                echo "" >> "${PATH_OF_THE_TEMPORARY_README}"
            elif [[ "${CURRENT_CONTENT_LINE}" == "## Inhaltsverzeichnis" ]];
            then
                PUT_NEXT_CONTENT_LINE_INTO_TEMPORARY_FILE=0
                echo "" >> "${PATH_OF_THE_TEMPORARY_README}"
                for GERMAN_INDEX_CONTENT_LINE in "${GLOBAL_LIST_OF_README_GERMAN_INDEX_CONTENT_LINES[@]}";
                do
                    echo "* ${GERMAN_INDEX_CONTENT_LINE}" >> "${PATH_OF_THE_TEMPORARY_README}"
                done
                echo "" >> "${PATH_OF_THE_TEMPORARY_README}"
            fi
        fi
    done < "${PATH_OF_THE_README}"

    execute_or_output "mv ${PATH_OF_THE_TEMPORARY_README} ${PATH_OF_THE_README}"
}
#end of updating the readme

#begin of main
cd ${GLOBAL_PATH_OF_THE_PROJECT_ROOT}

update_local_variables_by_parsing_the_getopts $@
update_local_variables_by_user_input
create_and_edit_recipe_file
scan_recipe_files_and_create_language_based_index
update_readme

cd ${GLOBAL_CURRENT_WORKING_DIRECTORY}
#end of main

####
#@todo
#<update readme>
#   sort recipies
#       by category
#       by name
#<update tag list>
#   read files per category
#   add each tag into a language based tag array (if tag is not already in)
#   create a file per tag
#   add a link to the tag file into the language based readme section
#   search in each file (per category) if this tag exist and add the title as well as the link to the file into this tag file
#<ask if you want to edit an existing recipe or create a new recipe>
####
